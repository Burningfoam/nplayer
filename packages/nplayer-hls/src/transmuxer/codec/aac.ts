export class AAC {
  static FREQ = [
    96000,
    88200,
    64000,
    48000,
    44100,
    32000,
    24000,
    22050,
    16000,
    12000,
    11025,
    8000,
    7350,
  ];

  static parseAdts(data: Uint8Array, pts: number, frameIndex = 0) {
    const spec = AAC.parseSpec(data);
    if (!spec) return;

    const len = data.length;
    let i = spec.skip;

    const frames = [];

    let frameLength;
    while ((i + 7) < len) {
      if ((data[i] !== 0xff) || (data[i + 1] & 0xF6) !== 0xf0) {
        i++;
        continue;
      }

      frameLength = ((data[i + 3] & 0x03) << 11) | (data[i + 4] << 3) | ((data[i + 5] & 0xe0) >> 5);
      if ((len - i) < frameLength) break;

      frames.push({
        pts: pts + frameIndex * AAC.getFrameDuration(spec.sampleRate),
        data: data.subarray(i + 7 + (~data[i + 1] & 0x01) * 2, i + frameLength),
      });

      i += frameLength;
    }

    return {
      remaining: i >= len ? undefined : data.subarray(i),
      frames,
      ...spec,
    };
  }

  static parseSpec(data: Uint8Array) {
    let i = 0;

    while ((i + 2) < data.length) {
      if (data[i] === 0xff && (data[i + 1] & 0xf6) === 0xf0) {
        break;
      }
      i++;
    }

    if ((i + 6) > data.length) return;

    const objectType = ((data[i + 2] & 0xc0) >>> 6) + 1;
    const channelCount = ((data[i + 2] & 1) << 2) | ((data[i + 3] & 0xc0) >>> 6);
    const samplingFrequencyIndex = (data[i + 2] & 0x3c) >>> 2;
    const sampleRate = AAC.FREQ[samplingFrequencyIndex];

    return {
      skip: i,
      samplingFrequencyIndex,
      sampleRate,
      objectType,
      channelCount,
      codec: `mp4a.40.${objectType}`,
    };
  }

  static getFrameDuration(rate: number): number {
    return 92160000 / rate;
  }

  static getSilentFrame(
    codec?: string,
    channelCount?: number,
  ): Uint8Array | void {
    switch (codec) {
      case 'mp4a.40.2':
        if (channelCount === 1) {
          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
        } if (channelCount === 2) {
          return new Uint8Array([
            0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80,
          ]);
        } if (channelCount === 3) {
          return new Uint8Array([
            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,
            0x00, 0x8e,
          ]);
        } if (channelCount === 4) {
          return new Uint8Array([
            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,
            0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38,
          ]);
        } if (channelCount === 5) {
          return new Uint8Array([
            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,
            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38,
          ]);
        } if (channelCount === 6) {
          return new Uint8Array([
            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,
            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2,
            0x00, 0x20, 0x08, 0xe0,
          ]);
        }

        break;
      default:
        if (channelCount === 1) {
          return new Uint8Array([
            0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,
            0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5e,
          ]);
        } if (channelCount === 2) {
          return new Uint8Array([
            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,
            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5e,
          ]);
        } if (channelCount === 3) {
          return new Uint8Array([
            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,
            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
            0x5a, 0x5e,
          ]);
        }
        break;
    }
  }
}
